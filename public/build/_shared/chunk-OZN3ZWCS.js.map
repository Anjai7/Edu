{
  "version": 3,
  "sources": ["../../../app/utils/supabase.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app\\\\utils\\\\supabase.ts\"\n);\nimport.meta.hot.lastModified = \"1757753877154.3481\";\n}\n// REMIX HMR END\n\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Support server + client env (in root we inject window.ENV)\r\nconst getEnv = () => {\r\n  if (typeof window !== 'undefined' && (window as any).ENV) {\r\n    return {\r\n      SUPABASE_URL: (window as any).ENV.SUPABASE_URL,\r\n      SUPABASE_ANON_KEY: (window as any).ENV.SUPABASE_ANON_KEY,\r\n    };\r\n  }\r\n  return {\r\n    SUPABASE_URL: process.env.SUPABASE_URL || '',\r\n    SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY || '',\r\n  };\r\n};\r\n\r\nconst { SUPABASE_URL, SUPABASE_ANON_KEY } = getEnv();\r\n\r\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\r\n\r\n// Client-side supabase instance\r\nexport const createSupabaseClient = () =>\r\n  createClient(getEnv().SUPABASE_URL, getEnv().SUPABASE_ANON_KEY);\r\n\r\n// Auth helpers\r\nexport const signInWithGoogle = async () => {\r\n  console.log('=== SIGN IN WITH GOOGLE ===');\r\n  console.log('Supabase client:', !!supabase);\r\n  console.log('Environment check:', {\r\n    SUPABASE_URL: getEnv().SUPABASE_URL ? 'Set' : 'Missing',\r\n    SUPABASE_ANON_KEY: getEnv().SUPABASE_ANON_KEY ? 'Set' : 'Missing'\r\n  });\r\n  \r\n  try {\r\n    const result = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n      options: {\r\n        redirectTo: typeof window !== 'undefined' ? window.location.origin + '/auth/callback' : undefined\r\n      }\r\n    });\r\n    \r\n    console.log('OAuth signIn result:', result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error('OAuth signIn error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getCurrentSession = async () => supabase.auth.getSession();\r\nexport const signOut = async () => supabase.auth.signOut();\r\n\r\n// Email verification and role checking\r\nexport const checkUserRole = async (email: string) => {\r\n  console.log('=== CHECKING USER ROLE ===');\r\n  console.log('Email to check:', email);\r\n  console.log('Supabase client:', !!supabase);\r\n  \r\n  try {\r\n    // First, test basic connectivity\r\n    const { data: testData, error: testError } = await supabase\r\n      .from('allowed_emails')\r\n      .select('count', { count: 'exact', head: true });\r\n    \r\n    console.log('Database connectivity test:', { testData, testError });\r\n    \r\n    // Now check the specific user\r\n    const { data, error } = await supabase\r\n      .from('allowed_emails')\r\n      .select('email, role, status')\r\n      .eq('email', email)\r\n      .eq('status', 'active')\r\n      .single();\r\n\r\n    console.log('Database query result:', { data, error });\r\n    console.log('Query details:', {\r\n      table: 'allowed_emails',\r\n      email: email,\r\n      status: 'active',\r\n      queryType: 'single'\r\n    });\r\n\r\n    if (error) {\r\n      console.error('Database error details:', {\r\n        message: error.message,\r\n        details: error.details,\r\n        hint: error.hint,\r\n        code: error.code\r\n      });\r\n      \r\n      // If single() fails, try without single() to see if record exists\r\n      const { data: allData, error: allError } = await supabase\r\n        .from('allowed_emails')\r\n        .select('email, role, status')\r\n        .eq('email', email);\r\n      \r\n      console.log('Fallback query (without single):', { allData, allError });\r\n    }\r\n\r\n    if (error || !data) {\r\n      console.log('User not found in allowed_emails or query error');\r\n      return { \r\n        isAllowed: false, \r\n        role: null, \r\n        error: error?.message || 'Email not found in allowed list' \r\n      };\r\n    }\r\n\r\n    console.log('User found and allowed:', data);\r\n    return { isAllowed: true, role: data.role, error: null };\r\n  } catch (err) {\r\n    console.error('Unexpected error in checkUserRole:', err);\r\n    return { \r\n      isAllowed: false, \r\n      role: null, \r\n      error: 'Database connection error' \r\n    };\r\n  }\r\n};\r\n\r\nexport const isEmailAllowed = async (email: string): Promise<boolean> => {\r\n  const result = await checkUserRole(email);\r\n  return result.isAllowed;\r\n};\r\n\r\n// Test function to debug database access\r\nexport const testDatabaseConnection = async () => {\r\n  console.log('=== TESTING DATABASE CONNECTION ===');\r\n  \r\n  try {\r\n    // Test 1: Basic connection\r\n    const { data: allEmails, error: allError } = await supabase\r\n      .from('allowed_emails')\r\n      .select('*');\r\n    \r\n    console.log('All emails in database:', { allEmails, allError });\r\n    \r\n    // Test 2: Specific email lookup\r\n    const { data: specificEmail, error: specificError } = await supabase\r\n      .from('allowed_emails')\r\n      .select('*')\r\n      .eq('email', 'anjai0600@gmail.com');\r\n    \r\n    console.log('Specific email lookup:', { specificEmail, specificError });\r\n    \r\n    return { success: !allError, data: allEmails, error: allError };\r\n  } catch (err) {\r\n    console.error('Database test failed:', err);\r\n    return { success: false, data: null, error: err };\r\n  }\r\n};\r\n\r\n// Typescript global augmentation for window.ENV\r\ndeclare global {\r\n  interface Window {\r\n    ENV?: {\r\n      SUPABASE_URL: string;\r\n      SUPABASE_ANON_KEY: string;\r\n    };\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
